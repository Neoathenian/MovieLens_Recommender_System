# Split user IDs into train and test sets
train_user_ids <- user_ids[1:n_train_users]
test_user_ids <- user_ids[(n_train_users + 1):length(user_ids)]
# Subset ratings dataframe into train and test dataframes based on user IDs
train <- ratings %>% filter(user_id %in% train_user_ids)
user_ids
train_user_ids
# Subset ratings dataframe into train and test dataframes based on user IDs
train <- ratings %>% filter(UserID %in% train_user_ids)
test <- ratings %>% filter(UserID %in% test_user_ids)
length(unique(train$UserID))+length(unique(test$UserID))
head(merged_df)
head(ratings)
merged_df[,c("UserID","MovieID","Rating")]
#Las lecturas son complicadas debido a que el separador usado
#no es de un solo byte, es decir: :: en vez de :
#ratings.dat
ratings_raw <- readLines("ratings.dat")
ratings_split <- strsplit(ratings_raw, "::")
ratings <- data.frame(matrix(unlist(ratings_split), nrow=length(ratings_split), byrow=TRUE))
names(ratings) <- c("UserID", "MovieID", "Rating", "Timestamp")
ratings$Rating=as.numeric(ratings$Rating)
#movies.dat
movies_raw <- readLines("movies.dat")
movies_split <- strsplit(movies_raw, "::")
movies <- data.frame(matrix(unlist(movies_split), nrow=length(movies_split), byrow=TRUE))
names(movies) <- c("MovieID", "Title", "Genres")
#tags.dat
tags_raw <- readLines("tags.dat")
tags_split <- strsplit(tags_raw, "::")
tags <- data.frame(matrix(unlist(tags_split), nrow=length(tags_split), byrow=TRUE))
names(tags) <- c("UserID", "MovieID", "Tag", "Timestamp")
library(stringr)
# Get unique genre values
unique_genres <- unique(unlist(str_split(movies$Genres, "\\|")))
# One-hot encode genres column
genre_matrix <- t(sapply(movies$Genres, function(x) {
split_vec <- str_split(x, "\\|")[[1]]
as.integer(unique_genres %in% split_vec)
}))
# Set column names of genre matrix to unique genre values
colnames(genre_matrix) <- unique_genres
OH_encoded_movies=cbind(movies[,c("MovieID","Title")], genre_matrix)
merged_df <- merge(ratings[,c("UserID","MovieID","Rating")], OH_encoded_movies, by = "MovieID", all.x = TRUE)
merged_df=merged_df[0:1000,]
library(caret)
library(ggplot2)
library(lattice)
#Let´s create a train/test split
set.seed(123)
train_index <- createDataPartition(merged_df$Rating, p=0.8, list=FALSE)
train <- merged_df[train_index,]
test <- merged_df[-train_index,]
control <- trainControl(method="cv", number=5)
summary(train$Rating)
library(caret)
predictors <- colnames(train)[!colnames(train) %in% c("MovieID", "UserID","Title")]
# Define the tuning parameter grid
grid <- expand.grid(alpha = 1, lambda = seq(0.001, 0.2, length = 10))
# Define the model using glmnet with alpha = 1 (lasso regression)
lasso_model <- train(Rating ~ ., data = train[, predictors], method = "glmnet",
trControl = control, tuneGrid = grid)
library(stringr)
# Get unique genre values
unique_genres <- unique(unlist(str_split(movies$Genres, "\\|")))
# One-hot encode genres column
genre_matrix <- t(sapply(movies$Genres, function(x) {
split_vec <- str_split(x, "\\|")[[1]]
as.integer(unique_genres %in% split_vec)
}))
# Set column names of genre matrix to unique genre values
colnames(genre_matrix) <- unique_genres
OH_encoded_movies=cbind(movies[,c("MovieID","Title")], genre_matrix)
merged_df <- merge(ratings[,c("UserID","MovieID","Rating")], OH_encoded_movies, by = "MovieID", all.x = TRUE)
```{r}
merged_df=merged_df[0:50000,]
#Para el test/train vamos a dividir según los usuarios, prediciendo así con
#do 20% de ellos
library(dplyr)
# Get unique user IDs
user_ids <- unique(ratings$UserID)
# Randomly shuffle user IDs
set.seed(123)
user_ids <- sample(user_ids)
# Calculate number of users in train and test sets
n_train_users <- ceiling(length(user_ids) * 0.8)
n_test_users <- length(user_ids) - n_train_users
# Split user IDs into train and test sets
train_user_ids <- user_ids[1:n_train_users]
test_user_ids <- user_ids[(n_train_users + 1):length(user_ids)]
# Obtenemos el train/test
train <- merged_df %>% filter(UserID %in% train_user_ids)
test <- merged_df %>% filter(UserID %in% test_user_ids)
length(unique(train$UserID))+length(unique(test$UserID))
library(ggplot2)
library(lattice)
library(caret)
##Let´s create a train/test split
#set.seed(123)
#train_index <- create#DataPartition(merged_df$Rating, p=0.8, list=FALSE)
#train <- merged_df[train_index,]
#test <- merged_df[-train_index,]
control <- trainControl(method="cv", number=5)
summary(train$Rating)
library(caret)
predictors <- colnames(train)[!colnames(train) %in% c("MovieID", "UserID","Title")]
# Define the tuning parameter grid
grid <- expand.grid(alpha = 1, lambda = seq(0.001, 0.2, length = 10))
# Define the model using glmnet with alpha = 1 (lasso regression)
lasso_model <- train(Rating ~ ., data = train[, predictors], method = "glmnet",
trControl = control, tuneGrid = grid)
#Nos quedaremos con el de menor rmse para la comparativa de luego
min_row <- which.min(lasso_model$results$RMSE)
lasso_cross_val <- lasso_model$results[min_row, ]
# Make predictions on the test data using the trained Lasso model
lasso_preds <- predict(lasso_model, newdata = test[,predictors])
# Calculate the root mean squared error (RMSE) of the predictions
RMSE_lasso <- sqrt(mean((test$Rating - lasso_preds)^2))
head(merged_df)
merged_df[,c("UserID","MovieID","Rating")]
library(recommenderlab)
# Al crear realRatingMatrix, R asume que la primera columna del marco de datos de #calificaciones contiene los ID de usuario, la segunda columna contiene los ID de #elementos (películas) y la tercera columna contiene los ratings
#Que haya mas columnas (timestamp) da igual
rating_matrix <- as(merged_df[train_index,c("UserID","MovieID","Rating")], "realRatingMatrix")
library(Matrix)
library(arules)
library(recommenderlab)
# Al crear realRatingMatrix, R asume que la primera columna del marco de datos de #calificaciones contiene los ID de usuario, la segunda columna contiene los ID de #elementos (películas) y la tercera columna contiene los ratings
#Que haya mas columnas (timestamp) da igual
rating_matrix <- as(merged_df[train_index,c("UserID","MovieID","Rating")], "realRatingMatrix")
lasso_model$results
library(recommenderlab)
## Create a data partition for cross-validation
#set.seed(123)
#
#library(caret)
#
## Convert the matrix to a vector
#rating_vector <- as.vector(rating_matrix@data)
## Create the data partition
#train_index <- createDataPartition(rating_vector, times = 1, p = 0.8, list = FALSE)
#
#train <- rating_matrix[train_index,]
#test <- rating_matrix[-train_index,]
# Define the recommenders to evaluate
recommenders <- list(
"UBCF" = Recommender(rating_matrix, method="UBCF"),
"IBCF" = Recommender(rating_matrix, method="IBCF"),
"POPULAR" = Recommender(rating_matrix, method="POPULAR")
)
recommenders <- list(
"UBCF" = Recommender(rating_matrix, method="UBCF"),
"IBCF" = Recommender(rating_matrix, method="IBCF"),
"POPULAR" = Recommender(rating_matrix, method="POPULAR")
)
Recommender(rating_matrix, method="POPULAR")
Recommender(rating_matrix, method="IBCF"),
Recommender(rating_matrix, method="IBCF")
Recommender(rating_matrix, method="UBCF")
library(stringr)
# Get unique genre values
unique_genres <- unique(unlist(str_split(movies$Genres, "\\|")))
# One-hot encode genres column
genre_matrix <- t(sapply(movies$Genres, function(x) {
split_vec <- str_split(x, "\\|")[[1]]
as.integer(unique_genres %in% split_vec)
}))
# Set column names of genre matrix to unique genre values
colnames(genre_matrix) <- unique_genres
OH_encoded_movies=cbind(movies[,c("MovieID","Title")], genre_matrix)
merged_df <- merge(ratings[,c("UserID","MovieID","Rating")], OH_encoded_movies, by = "MovieID", all.x = TRUE)
#Para el test/train vamos a dividir según los usuarios, prediciendo así con
#do 20% de ellos
library(dplyr)
# Get unique user IDs
user_ids <- unique(ratings$UserID)
# Randomly shuffle user IDs
set.seed(123)
user_ids <- sample(user_ids)
# Calculate number of users in train and test sets
n_train_users <- ceiling(length(user_ids) * 0.8)
n_test_users <- length(user_ids) - n_train_users
# Split user IDs into train and test sets
train_user_ids <- user_ids[1:n_train_users]
test_user_ids <- user_ids[(n_train_users + 1):length(user_ids)]
# Obtenemos el train/test
train <- merged_df %>% filter(UserID %in% train_user_ids)
test <- merged_df %>% filter(UserID %in% test_user_ids)
#length(unique(train$UserID))+length(unique(test$UserID))
# Define the recommenders to evaluate
recommenders <- list(
"UBCF" = Recommender(rating_matrix, method="UBCF"),
"IBCF" = Recommender(rating_matrix, method="IBCF"),
"POPULAR" = Recommender(rating_matrix, method="POPULAR")
)
Recommender(rating_matrix, method="IBCF")
dim(merged_df)
# Al crear realRatingMatrix, R asume que la primera columna del marco de datos de #calificaciones contiene los ID de usuario, la segunda columna contiene los ID de #elementos (películas) y la tercera columna contiene los ratings
#Que haya mas columnas (timestamp) da igual
rating_matrix <- as(merged_df[train_index,c("UserID","MovieID","Rating")], "realRatingMatrix")
Recommender(rating_matrix, method="IBCF")
help("IBCF")
scheme <- evaluationScheme(rating_matrix, method = "cross-validation", k = 10, given = -5,
goodRating = 4)
scheme <- evaluationScheme(merged_df[train_index,c("UserID","MovieID","Rating")], method = "cross-validation", k = 10, given = -5,
goodRating = 4)
scheme
scheme <- evaluationScheme(rating_matrix, method = "cross-validation", k = 10, given = -5,
goodRating = 4)
scheme <- evaluationScheme(rating_matrix, method = "cross-validation", k = 10, given = -1,
goodRating = 4)
scheme <- evaluationScheme(rating_matrix, method = "cross-validation", k = 10, given = -1,
goodRating = 4)
scheme <- evaluationScheme(rating_matrix, method = "cross-validation", k = 5, given = -1,
goodRating = 4)
scheme <- evaluationScheme(rating_matrix, method = "cross-validation", k = 5, given = 1,
goodRating = 4)
scheme
dim(rating_matrix)
## Evaluation scheme using all-but-5 items
## Method: 'cross-validation' with 10 run(s).
## Good ratings: >=4.000000
## Data set: 358 x 1664 rating matrix of class 'realRatingMatrix' with 73610 ratings.
algorithms <- list(`random items` = list(name = "RANDOM", param = NULL), `popular items` = list(name = "POPULAR",
param = NULL), `user-based CF` = list(name = "UBCF", param = list(nn = 3)), `item-based CF` = list(name = "IBCF",
param = list(k = 100)))
results <- evaluate(scheme, algorithms, type = "topNList", n = c(1, 3, 5, 10), progress = FALSE)
plot(results, annotate = 2, legend = "topleft")
results <- evaluate(scheme, algorithms, type = "topNList", n = c(1), progress = FALSE)
plot(results, annotate = 2, legend = "topleft")
results <- evaluate(scheme, algorithms, type = "ratings", n = c(1), progress = FALSE)
results <- evaluate(scheme, algorithms, type = "ratings", progress = FALSE)
e <- evaluationScheme(rating_matrix, method="split", train = 0.9,
k = 1, given = 3)
e <- evaluationScheme(rating_matrix, method="split", train = 0.9,k = 1, given = 3)
e <- evaluationScheme(rating_matrix, method="split", train = 0.9,k = 1, given = 1)
e
## create a user-based CF recommender using training data
r <- Recommender(getData(e, "train"), "UBCF")
## create predictions for the test data using known ratings (see given above)
p <- predict(r, getData(e, "known"), type="topNList", n = 10)
## create predictions for the test data using known ratings (see given above)
p <- predict(r, getData(e, "known"), type="topNList", n = 1)
## create predictions for the test data using known ratings (see given above)
p <- predict(r, getData(e, "known"), type="topNList", n = 1)
dim(rating_matrix)
# Al crear realRatingMatrix, R asume que la primera columna del marco de datos de #calificaciones contiene los ID de usuario, la segunda columna contiene los ID de #elementos (películas) y la tercera columna contiene los ratings
#Que haya mas columnas (timestamp) da igual
rating_matrix <- as(merged_df[,c("UserID","MovieID","Rating")], "realRatingMatrix")
dim(rating_matrix)
e <- evaluationScheme(rating_matrix, method="split", train = 0.9,k = 1, given = 1)
e <- evaluationScheme(rating_matrix, method="split", train = 0.9,k = 1, given = 1)
## create a user-based CF recommender using training data
r <- Recommender(getData(e, "train"), "UBCF")
## create predictions for the test data using known ratings (see given above)
p <- predict(r, getData(e, "known"), type="topNList", n = 1)
2
e <- evaluationScheme(rating_matrix, method="split", train = 0.9,k = 1, given = 1)
e <- evaluationScheme(rating_matrix, method="split", train = 0.9,k = 1, given = 1)
## create a user-based CF recommender using training data
r <- Recommender(getData(e, "train"), "UBCF")
r
## create predictions for the test data using known ratings (see given above)
p <- predict(r, getData(e, "known"), type="topNList", n = 1)
e <- evaluationScheme(rating_matrix, method="split", train = 0.9,k = 5, given = 1)
e <- evaluationScheme(rating_matrix, method="split", train = 0.9,k = 5, given = 1)
## create a user-based CF recommender using training data
r <- Recommender(getData(e, "train"), "UBCF")
## create predictions for the test data using known ratings (see given above)
p <- predict(r, getData(e, "known"), type="topNList", n = 1)
dim(rating_matrix)
e <- evaluationScheme(rating_matrix[0:1000,], method="split", train = 0.9,k = 1, given = 1)
e
e
## create a user-based CF recommender using training data
r <- Recommender(getData(e, "train"), "UBCF")
## create predictions for the test data using known ratings (see given above)
p <- predict(r, getData(e, "known"), type="topNList", n = 1)
e <- evaluationScheme(rating_matrix[0:1000,], method="split", train = 0.9,k = 1, given = 1,goodRating = 4)
e
e
## create a user-based CF recommender using training data
r <- Recommender(getData(e, "train"), "UBCF")
## create predictions for the test data using known ratings (see given above)
p <- predict(r, getData(e, "known"), type="topNList", n = 1)
p
p
p$predictions
as(p, "matrix")
dim(p)
dim(as(p, "matrix"))
getData(e, "known")
getData(e, "known")
p
getData(e, "known")
as.matrix(getData(e, "known"))
as(getData(e, "known"),"matrix")
head(as(getData(e, "known"),"matrix"))
dim(as(getData(e, "known"),"matrix"))
## create an evaluation scheme (10-fold cross validation, given-3 scheme)
es <- evaluationScheme(rating_matrix[0:1000,], method="cross-validation",k=5, given=1)
## run evaluation
ev <- evaluate(es, "UBCF", n=c(1))
## create an evaluation scheme (10-fold cross validation, given-3 scheme)
es <- evaluationScheme(rating_matrix[0:1000,], method="cross-validation",k=5, given=1,goodRating = 4)
## create an evaluation scheme (10-fold cross validation, given-3 scheme)
es <- evaluationScheme(rating_matrix[0:1000,], method="cross-validation",k=5, given=1,goodRating = 4)
## run evaluation
ev <- evaluate(es, "UBCF", n=c(1))
ev
typeof(ev)
class(ev)
getResults(ev)
getResults(r)
r
p
getResults(p)
## look at the results (the length of the topNList is shown as column n)
getResults(ev)
## get a confusion matrices averaged over the 10 folds
avg(ev)
## look at the results (the length of the topNList is shown as column n)
getResults(ev)
plot(ev, annotate = TRUE)
getResults(ev)
## create an evaluation scheme (10-fold cross validation, given-3 scheme)
es <- evaluationScheme(rating_matrix[0:1000,], method="cross-validation",k=5, given=2,goodRating = 4)
#Las lecturas son complicadas debido a que el separador usado
#no es de un solo byte, es decir: :: en vez de :
#ratings.dat
library(recommenderlab)
#Las lecturas son complicadas debido a que el separador usado
#no es de un solo byte, es decir: :: en vez de :
#ratings.dat
library(recommenderlab)
ratings_raw <- readLines("ml-1m/ratings.dat")
ratings_split <- strsplit(ratings_raw, "::")
ratings_df <- data.frame(matrix(unlist(ratings_split), nrow=length(ratings_split), byrow=TRUE))
names(ratings_df) <- c("UserID", "MovieID", "Rating", "Timestamp")
ratings_df$Rating=as.numeric(ratings_df$Rating)
#movies.dat
movies_raw <- readLines("ml-1m/movies.dat")
movies_split <- strsplit(movies_raw, "::")
movies_df <- data.frame(matrix(unlist(movies_split), nrow=length(movies_split), byrow=TRUE))
names(movies_df) <- c("MovieID", "Title", "Genres")
#Hacemos un join de movies_df y ratings_df sobre la columna MovieID
#para que se sepan los nombres de las películas
merged_df <- merge(ratings_df,movies_df, by = "MovieID", all.x = F)
#rating_matrix
rat_mat=as(merged_df[,c("UserID","Title","Rating")],"realRatingMatrix")
#k is para el tema de NN
scheme <- evaluationScheme(rat_mat_train, method="cross", k=5, given=10, goodRating=4)
algorithms <- list(
"Popular" = list(name="Popular")
)
#k is para el tema de NN
scheme <- evaluationScheme(rat_mat_train, method="cross", k=5, given=10, goodRating=4)
#Las lecturas son complicadas debido a que el separador usado
#no es de un solo byte, es decir: :: en vez de :
#ratings.dat
library(recommenderlab)
library(dplyr)
ratings_raw <- readLines("ml-1m/ratings.dat")
ratings_split <- strsplit(ratings_raw, "::")
ratings_df <- data.frame(matrix(unlist(ratings_split), nrow=length(ratings_split), byrow=TRUE))
names(ratings_df) <- c("UserID", "MovieID", "Rating", "Timestamp")
ratings_df$Rating=as.numeric(ratings_df$Rating)
#movies.dat
movies_raw <- readLines("ml-1m/movies.dat")
movies_split <- strsplit(movies_raw, "::")
movies_df <- data.frame(matrix(unlist(movies_split), nrow=length(movies_split), byrow=TRUE))
names(movies_df) <- c("MovieID", "Title", "Genres")
#Hacemos un join de movies_df y ratings_df sobre la columna MovieID
#para que se sepan los nombres de las películas
merged_df <- merge(ratings_df,movies_df, by = "MovieID", all.x = F)
#rating_matrix
rat_mat=as(merged_df[,c("UserID","Title","Rating")],"realRatingMatrix")
library(ggplot2)
hist(getRatings(normalize(rat_mat)), breaks=100)
print(paste0("Peli con mas ratings: ",names(which.max(colCounts(rat_mat)))[1]," con: ", sum(!is.na(as(rat_mat[,128],"matrix")))," ratings"))
par(mfrow=c(1,2)) # Set up a 1x2 layout for the plots
hist(rowCounts(rat_mat), breaks=50, main="Counts ratings users")
hist(colCounts(rat_mat), breaks=20, main="Counts ratings Películas")
library(stringr)
unique_genres <- unique(unlist(str_split(movies_df$Genres, "\\|")))
# One-hot encode la columna de géneros
genre_matrix <- t(sapply(movies_df$Genres, function(x) {
split_vec <- str_split(x, "\\|")[[1]]
as.integer(unique_genres %in% split_vec)
}))
# Hacemos que se vea claro cual es cada columna
colnames(genre_matrix) <- unique_genres
OH_encoded_movies=cbind(movies_df[,c("MovieID","Title")], genre_matrix)
merged_df <- merge(ratings_df[,c("UserID","MovieID","Rating")], OH_encoded_movies, by = "MovieID", all.x = TRUE)
# Get unique user IDs
user_ids <- unique(ratings_df$UserID)
# Randomly shuffle user IDs
set.seed(123)
user_ids <- sample(user_ids)
# Calculate number of users in train and test sets
n_train_users <- ceiling(length(user_ids) * 0.8)
n_test_users <- length(user_ids) - n_train_users
# Split user IDs into train and test sets
train_user_ids <- user_ids[1:n_train_users]
test_user_ids <- user_ids[(n_train_users + 1):length(user_ids)]
# Obtenemos el train/test
train <- merged_df %>% filter(UserID %in% train_user_ids)
test <- merged_df %>% filter(UserID %in% test_user_ids)
predictors <- colnames(train)[!colnames(train) %in% c("MovieID", "UserID","Title")]
lin_mod=lm(Rating ~ .,train[, predictors])# best_glm$lambda)
#Esto lo guardamos para luego comparar este modelo con los demás
lin_mod_pred=predict(lin_mod,newdata=test[,predictors[-1]])
test[,"Prediction"]=lin_mod_pred
rat_mat_lm=as(test[,c("UserID","Title","Prediction")],"realRatingMatrix")
#Tenemos que hacer que tenga las mismas columnas que la rating matrix para luego poder hacer evaluaciones
rat_mat_lm=as(rat_mat_lm,"matrix")
#Creamos una máscara de 0s
rat_mat_lm2 <- matrix(0, nrow = nrow(rat_mat_lm), ncol = ncol(rat_mat))
colnames(rat_mat_lm2)=colnames(rat_mat)
# Rellenamos la máscara
match_cols <- match(colnames(rat_mat_lm), colnames(rat_mat))
rat_mat_lm2[, colnames(rat_mat_lm2)] <- rat_mat_lm2[, colnames(rat_mat_lm2)]
rownames(rat_mat_lm2)=rownames(rat_mat_lm)
rat_mat_lm=as(rat_mat_lm2,"realRatingMatrix")
lin_mod$coefficients
hist(lin_mod_pred)
rat_mat_train=rat_mat[train_user_ids,]
rat_mat_test=rat_mat[test_user_ids,]
#k is para el tema de NN
scheme <- evaluationScheme(rat_mat_train, method="cross", k=5, given=10, goodRating=4)
algorithms <- list(
"Popular" = list(name="Popular")
)
results <- evaluate(scheme, algorithms, n=c(1, 3, 5, 10, 15, 20))
results
plot(results, annotate=c(1,3), legend="topleft")
plot(results, "prec/rec", annotate=3)
#avg(results)
#k is para el tema de NN
scheme <- evaluationScheme(rat_mat_train, method="cross", k=5, given=10, goodRating=4)
algorithms <- list(
"Popular" = list(name="Popular")
)
results <- evaluate(scheme, algorithms, n=c(1, 3, 5, 10, 15, 20))
#results
plot(results, annotate=c(1,3), legend="topleft")
plot(results, "prec/rec", annotate=3)
#avg(results)
#k is para el tema de NN
scheme <- evaluationScheme(rat_mat_train, method="cross", k=5, given=10, goodRating=4)
algorithms <- list(
"Popular" = list(name="Popular")
)
results <- evaluate(scheme, algorithms, n=c(1, 3, 5, 10, 15, 20),verbose=F)
results <- evaluate(scheme, algorithms, n=c(1, 3, 5, 10, 15, 20));
results <- suppressMessages({evaluate(scheme, algorithms, n=c(1, 3, 5, 10, 15, 20));})
suppressMessages({evaluate(scheme, algorithms, n=c(1, 3, 5, 10, 15, 20));})
results <- invisible(evaluate(scheme, algorithms, n=c(1, 3, 5, 10, 15, 20)))
results <- capture.output(evaluate(scheme, algorithms, n=c(1, 3, 5, 10, 15, 20)))
#results
plot(results, annotate=c(1,3), legend="topleft")
results
#k is para el tema de NN
scheme <- evaluationScheme(rat_mat_train, method="cross", k=5, given=10, goodRating=4)
algorithms <- list(
"Popular" = list(name="Popular")
)
results <- evaluate(scheme, algorithms, n=c(1, 3, 5, 10, 15, 20))
results <- evaluate(scheme, algorithms, n=c(1, 3, 5, 10, 15, 20))
#Las lecturas son complicadas debido a que el separador usado
#no es de un solo byte, es decir: :: en vez de :
#ratings.dat
library(recommenderlab)
library(dplyr)
ratings_raw <- readLines("ml-1m/ratings.dat")
ratings_split <- strsplit(ratings_raw, "::")
ratings_df <- data.frame(matrix(unlist(ratings_split), nrow=length(ratings_split), byrow=TRUE))
names(ratings_df) <- c("UserID", "MovieID", "Rating", "Timestamp")
ratings_df$Rating=as.numeric(ratings_df$Rating)
#movies.dat
movies_raw <- readLines("ml-1m/movies.dat")
movies_split <- strsplit(movies_raw, "::")
movies_df <- data.frame(matrix(unlist(movies_split), nrow=length(movies_split), byrow=TRUE))
names(movies_df) <- c("MovieID", "Title", "Genres")
#Hacemos un join de movies_df y ratings_df sobre la columna MovieID
#para que se sepan los nombres de las películas
merged_df <- merge(ratings_df,movies_df, by = "MovieID", all.x = F)
#rating_matrix
rat_mat=as(merged_df[,c("UserID","Title","Rating")],"realRatingMatrix")
#Las lecturas son complicadas debido a que el separador usado
#no es de un solo byte, es decir: :: en vez de :
#ratings.dat
library(recommenderlab)
library(dplyr)
ratings_raw <- readLines("ml-1m/ratings.dat")
ratings_split <- strsplit(ratings_raw, "::")
ratings_df <- data.frame(matrix(unlist(ratings_split), nrow=length(ratings_split), byrow=TRUE))
names(ratings_df) <- c("UserID", "MovieID", "Rating", "Timestamp")
ratings_df$Rating=as.numeric(ratings_df$Rating)
#movies.dat
movies_raw <- readLines("ml-1m/movies.dat")
movies_split <- strsplit(movies_raw, "::")
movies_df <- data.frame(matrix(unlist(movies_split), nrow=length(movies_split), byrow=TRUE))
names(movies_df) <- c("MovieID", "Title", "Genres")
#Hacemos un join de movies_df y ratings_df sobre la columna MovieID
#para que se sepan los nombres de las películas
merged_df <- merge(ratings_df,movies_df, by = "MovieID", all.x = F)
#rating_matrix
rat_mat=as(merged_df[,c("UserID","Title","Rating")],"realRatingMatrix")
library(dplyr)
knit_with_parameters("C:/Users/Rafa/Desktop/ACUE/Practica_res/gaessgae.rmd")
unlink("gaessgae_cache", recursive = TRUE)
